USE DATABASE DEMO_DATABASE;

USE WAREHOUSE HF_WAREHOUSE;

CREATE OR REPLACE TABLE EMPLOYEE
(
   EMPID INTEGER NOT NULL PRIMARY KEY,
   EMP_NAME VARCHAR2(20),
   JOB_ROLE STRING,
   SALARY NUMBER(10,2)
);

INSERT INTO EMPLOYEE
VALUES('101','ANAND JHA','Analyst',50000);

INSERT INTO EMPLOYEE
VALUES('114','AAMIR','Analyst',50000);

INSERT INTO EMPLOYEE
VALUES('114','SAMEER','Analyst',50000);

INSERT INTO EMPLOYEE
VALUES(102,'ALex', 'Data Engineer',60000);

INSERT INTO EMPLOYEE
VALUES(102,'MICHAEL', 'Data Engineer',60000);

INSERT INTO EMPLOYEE
VALUES(103,'Ravi', 'Data Scientist',48000);

INSERT INTO EMPLOYEE
VALUES(103,'KOUSHALYA', 'Data Scientist',48000);

INSERT INTO EMPLOYEE
VALUES(104,'Peter', 'Analyst',98000);

INSERT INTO EMPLOYEE
VALUES(104,'SAM', 'Analyst',45000);

INSERT INTO EMPLOYEE
VALUES(105,'Pulkit', 'Data Scientist',72000);

INSERT INTO EMPLOYEE
VALUES(106,'Robert','Analyst',100000);

INSERT INTO EMPLOYEE
VALUES(107,'Rishabh','Data Engineer',67000);

INSERT INTO EMPLOYEE
VALUES(108,'Subhash','Manager',148000);

INSERT INTO EMPLOYEE
VALUES(109,'Michaeal','Manager',213000);

INSERT INTO EMPLOYEE
VALUES(110,'Dhruv','Data Scientist',89000);

INSERT INTO EMPLOYEE
VALUES(111,'Amit Sharma','Analyst',72000);

select * from employee;

SELECT *, 
ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY ) AS ROW_WISE
FROM EMPLOYEE;

SELECT *,
RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SALARY_RANK
FROM EMPLOYEE;

SELECT *, 
DENSE_RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SALARY_DENSE_RANK
FROM EMPLOYEE;

SELECT *, 
ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS ROW_WISE,
RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SALARY_RANK,
DENSE_RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SALARY_DENSE_RANK
FROM EMPLOYEE;

SELECT *,
ROW_NUMBER() OVER(ORDER BY SALARY) AS ROW_WITHOUT_PARTITION
FROM EMPLOYEE;


SELECT JOB_ROLE, SUM(SALARY) FROM EMPLOYEE
GROUP BY JOB_ROLE;

SELECT *, SUM(SALARY) OVER() AS TOTAL_SALARY
FROM EMPLOYEE;

--display total salary along with all the records DEPARTMENT WISE FOR every row value 
SELECT * , SUM(SALARY) OVER() AS TOT_SALARY,
SUM(SALARY) OVER(PARTITION BY JOB_ROLE) AS TOT_SALARY
FROM EMPLOYEE;

SELECT *, MAX(SALARY) OVER() AS MAX_SALARY
FROM EMPLOYEE;

select *,max(salary) over(partition by JOB_ROLE) as MAX_SAL , 
min(salary) over(partition by JOB_ROLE) as MIN_SAL,
SUM(salary) over(partition by JOB_ROLE) as TOT_SAL
from Employee;

select *, 
min(salary) over(partition by JOB_ROLE) as MIN_SAL,
max(salary) over(partition by JOB_ROLE) as MAX_SAL ,
SUM(SALARY) OVER(PARTITION BY JOB_ROLE) AS TOT_SALARY_JOB_WISE,
SUM(SALARY) OVER() AS TOT_SALARY,
ROW_NUMBER() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SAL_ROW_WITH_PARTITION,
ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS SAL_ROW_WITHOUT_PARTITION,
RANK() OVER(PARTITION BY JOB_ROLE ORDER BY  SALARY DESC) AS SAL_RANK_USING_RANK,
DENSE_RANK() OVER(PARTITION BY JOB_ROLE ORDER BY  SALARY DESC) AS SAL_RANK_USING_DENSE_RANK
FROM employee;

SELECT * FROM
(SELECT *, RANK() OVER(PARTITION BY JOB_ROLE ORDER BY SALARY DESC) AS SALARY_RANK
FROM EMPLOYEE) AS A
WHERE A.SALARY_RANK <= 5;

--------lead

CREATE OR REPLACE TABLE HF_PRODUCT
(PROD_ID INT NOT NULL,
 SALE_DATE DATE NOT NULL,
 DAILY_SALES NUMBER(10,2)
)

INSERT INTO HF_PRODUCT
(PROD_ID, SALE_DATE,DAILY_SALES)
VALUES
(1000, '2000-09-28', 48850.40),
(1000, '2000-09-29', 54500.22),
(1000, '2000-09-30', 36000.07),
(1000, '2000-10-01', 40200.43),
(2000, '2000-09-28', 41888.88),
(2000, '2000-09-29', 48000.00),
(2000, '2000-09-30', 49850.03),
(2000, '2000-01-10', 54850.29),
(3000, '2000-09-28', 61301.77),
(3000, '2000-09-29', 34509.13),
(3000, '2000-09-30', 43868.86),
(3000, '2000-10-01', 28000.00);


SELECT * FROM HF_PRODUCT;

SELECT PROD_ID, SALE_DATE, DAILY_SALES,
LEAD(DAILY_SALES, -1) OVER(ORDER BY PROD_ID) AS SALES_COM
FROM HF_PRODUCT;


SELECT PROD_ID, SALE_DATE, DAILY_SALES,
LEAD(DAILY_SALES, 1) OVER(PARTITION BY PROD_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALES,
LEAD(DAILY_SALES, 2) OVER(PARTITION BY PROD_ID ORDER BY SALE_DATE) AS TWO_DAY_SALES,
LEAD(DAILY_SALES, 3) OVER(PARTITION BY PROD_ID ORDER BY SALE_DATE) AS THRID_DAY_SALES,
ROUND((NEXT_DAY_SALES - DAILY_SALES)/DAILY_SALES * 100 ,2) AS SALES_PREC,
ROUND((TWO_DAY_SALES - NEXT_DAY_SALES)/NEXT_DAY_SALES * 100 ,2) AS TWO_SALES_PREC,
ROUND((THRID_DAY_SALES - TWO_DAY_SALES)/TWO_DAY_SALES * 100 ,2) AS THRID_SALES_PREC
FROM HF_PRODUCT
QUALIFY THRID_DAY_SALES IS NOT NULL;

SELECT PROD_ID, SALE_DATE, DAILY_SALES,
LAG(DAILY_SALES, 1) OVER(ORDER BY PROD_ID) AS SALES_COM
FROM HF_PRODUCT;

SELECT PROD_ID, SALE_DATE, DAILY_SALES,
LAG(DAILY_SALES, 1) OVER(PARTITION BY PROD_ID ORDER BY SALE_DATE) AS PREV_DAY_SALES,
LAG(DAILY_SALES, 2) OVER(PARTITION BY PROD_ID ORDER BY SALE_DATE) AS PREV2_DAY_SALES,
LAG(DAILY_SALES, 3) OVER(PARTITION BY PROD_ID ORDER BY SALE_DATE) AS PREV3_DAY_SALES,
ROUND((PREV_DAY_SALES - DAILY_SALES)/DAILY_SALES * 100 ,2) AS SALES_PREC,
ROUND((PREV2_DAY_SALES - PREV2_DAY_SALES)/PREV2_DAY_SALES * 100 ,2) AS TWO_SALES_PREC,
ROUND((PREV3_DAY_SALES - PREV3_DAY_SALES)/PREV3_DAY_SALES * 100 ,2) AS THRID_SALES_PREC
FROM HF_PRODUCT
QUALIFY PREV3_DAY_SALES IS NOT NULL;
